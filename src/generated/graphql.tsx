import gql from 'graphql-tag';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** DateTime */
  DateTime: any;
};


export type Kusorep = {
  __typename?: 'Kusorep';
  /** 内容 */
  content: Scalars['String'];
  /** 作成日時 */
  createdAt: Scalars['DateTime'];
  /** ID */
  id: Scalars['ID'];
  /** メンバー名 */
  memberName: Scalars['String'];
  /** 更新日時 */
  updatedAt: Scalars['DateTime'];
  /** 投票数 */
  voteNumber: Scalars['Int'];
};

/** The connection type for Kusorep. */
export type KusorepConnection = {
  __typename?: 'KusorepConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<KusorepEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Kusorep>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type KusorepEdge = {
  __typename?: 'KusorepEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Kusorep>;
};

export type Member = {
  __typename?: 'Member';
  /** 作成日時 */
  createdAt: Scalars['DateTime'];
  /** ID */
  id: Scalars['ID'];
  /** 名前 */
  name: Scalars['String'];
  /** 更新日時 */
  updatedAt: Scalars['DateTime'];
};

export type Mutation = {
  __typename?: 'Mutation';
  newKusorep?: Maybe<NewKusorepPayload>;
  newMember?: Maybe<NewMemberPayload>;
  newRoom?: Maybe<NewRoomPayload>;
  newTheme?: Maybe<NewThemePayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
  voteKusorep?: Maybe<VoteKusorepPayload>;
};


export type MutationNewKusorepArgs = {
  input: NewKusorepInput;
};


export type MutationNewMemberArgs = {
  input: NewMemberInput;
};


export type MutationNewRoomArgs = {
  input: NewRoomInput;
};


export type MutationNewThemeArgs = {
  input: NewThemeInput;
};


export type MutationVoteKusorepArgs = {
  input: VoteKusorepInput;
};

/** Autogenerated input type of NewKusorep */
export type NewKusorepInput = {
  /** 内容 */
  content: Scalars['String'];
  /** メンバーID */
  memberId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of NewKusorep */
export type NewKusorepPayload = {
  __typename?: 'NewKusorepPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  kusorep: Kusorep;
  member: Member;
};

/** Autogenerated input type of NewMember */
export type NewMemberInput = {
  /** 名前 */
  name: Scalars['String'];
  /** ルームID */
  roomId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of NewMember */
export type NewMemberPayload = {
  __typename?: 'NewMemberPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  member: Member;
  room: Room;
};

/** Autogenerated input type of NewRoom */
export type NewRoomInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of NewRoom */
export type NewRoomPayload = {
  __typename?: 'NewRoomPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  room: Room;
};

/** Autogenerated input type of NewTheme */
export type NewThemeInput = {
  /** 内容 */
  content: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of NewTheme */
export type NewThemePayload = {
  __typename?: 'NewThemePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  theme: Theme;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  room: Room;
  rooms: RoomConnection;
  theme: Theme;
  themes: ThemeConnection;
};


export type QueryRoomArgs = {
  id: Scalars['ID'];
};


export type QueryRoomsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryThemesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type Room = {
  __typename?: 'Room';
  /** 作成日時 */
  createdAt: Scalars['DateTime'];
  /** ID */
  id: Scalars['ID'];
  kusoreps?: Maybe<Array<Kusorep>>;
  members?: Maybe<Array<Member>>;
  /** ルームのテーマ */
  theme?: Maybe<Scalars['String']>;
  /** 更新日時 */
  updatedAt: Scalars['DateTime'];
};

/** The connection type for Room. */
export type RoomConnection = {
  __typename?: 'RoomConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RoomEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Room>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RoomEdge = {
  __typename?: 'RoomEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Room>;
};

export type Theme = {
  __typename?: 'Theme';
  /** 内容 */
  content: Scalars['String'];
  /** 作成日時 */
  createdAt: Scalars['DateTime'];
  /** ID */
  id: Scalars['ID'];
  kusorep?: Maybe<Kusorep>;
  kusoreps?: Maybe<KusorepConnection>;
  /** 更新日時 */
  updatedAt: Scalars['DateTime'];
};


export type ThemeKusorepsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Theme. */
export type ThemeConnection = {
  __typename?: 'ThemeConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ThemeEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Theme>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ThemeEdge = {
  __typename?: 'ThemeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Theme>;
};

/** Autogenerated input type of VoteKusorep */
export type VoteKusorepInput = {
  /** ID */
  id: Scalars['ID'];
  /** 投票フラグ */
  isVote: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of VoteKusorep */
export type VoteKusorepPayload = {
  __typename?: 'VoteKusorepPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  kusorep: Kusorep;
};

export type RoomQueryVariables = Exact<{
  roomId: Scalars['ID'];
}>;


export type RoomQuery = (
  { __typename?: 'Query' }
  & { room: (
    { __typename?: 'Room' }
    & Pick<Room, 'id' | 'theme' | 'createdAt' | 'updatedAt'>
  ) }
);


export const RoomDocument = gql`
    query room($roomId: ID!) {
  room(id: $roomId) {
    id
    theme
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useRoomQuery__
 *
 * To run a query within a React component, call `useRoomQuery` and pass it any options that fit your needs.
 * When your component renders, `useRoomQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRoomQuery({
 *   variables: {
 *      roomId: // value for 'roomId'
 *   },
 * });
 */
export function useRoomQuery(baseOptions: Apollo.QueryHookOptions<RoomQuery, RoomQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RoomQuery, RoomQueryVariables>(RoomDocument, options);
      }
export function useRoomLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RoomQuery, RoomQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RoomQuery, RoomQueryVariables>(RoomDocument, options);
        }
export type RoomQueryHookResult = ReturnType<typeof useRoomQuery>;
export type RoomLazyQueryHookResult = ReturnType<typeof useRoomLazyQuery>;
export type RoomQueryResult = Apollo.QueryResult<RoomQuery, RoomQueryVariables>;
export function refetchRoomQuery(variables?: RoomQueryVariables) {
      return { query: RoomDocument, variables: variables }
    }